<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 	 <!-- namespace="mapper의 패키지 경로(매퍼의 이름)" -->
  
	<mapper namespace="mybatis.mapper.student">
	
	<!-- 1. 학생목록 -->
	<select id="selectAllStudents" resultType="Student">
		SELECT STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
		FROM STUDENT
		ORDER BY STU_NO
	</select>
	
	<!-- 2. 전체 학생 수 -->
	<select id="selectAllStudentsCount" resultType="int">
		SELECT COUNT(*)
		FROM STUDENT
	</select>
	
	<!-- 3. 전체 평균 -->
	<select id="selectAllStudentsAverage" resultType="double">
		SELECT NVL(AVG(AVE), 0)
		FROM STUDENT		
	</select>
	
	<!-- 4. 학생등록 -->
	<insert id="insertStudent" parameterType="Student">
		INSERT INTO STUDENT
		(STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE)
		VALUES
			(STUDENT_SEQ.NEXTVAL, #{name}, #{kor}, #{eng}, #{math}, #{ave}, #{grade})
	</insert>
	
	<!-- 5. 평균범위조회 -->
	<select id="selectStudentsByAve" parameterType="Map" resultType="Student"><!-- 도메인(객체)을 새로 만들어서 begin과 end를 만들거나 Map(or map)(객체대신사용)으로 쿼리 묶기-->
		<![CDATA[
		SELECT STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
		FROM STUDENT
		WHERE AVE >= #{begin} AND AVE <= #{end}
		]]><!-- 문제대상만 묶어도 됨 -->
	</select>
	
	<!-- 6. 평균범위조회 : 개수 -->
	<select id="selectStudentsByAveCount" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		FROM STUDENT
<<<<<<< HEAD
		WHERE AVE >= #{begin} AND AVE <![CDATA[<]]>= #{end}
=======
		WHERE AVE >= #{begin} AND AVE <![CDATA[<=]]> #{end}
>>>>>>> c75a8e6c98cc08ab96481493b891ba67c8be16f5
	</select>
	
	<!-- 7. 평균범위조회 : 평균-->
	<select id="selectStudentsByAveAverage" parameterType="Map" resultType="double">
		SELECT NVL(AVG(AVE), 0)
		FROM STUDENT
		WHERE AVE >= #{begin} AND AVE <![CDATA[<]]>= #{end}
	</select>
	<!-- 8. 학생삭제 -->
	<delete id="deleteStudent" parameterType="int">
		DELETE FROM STUDENT WHERE STU_NO = #{stuNo}
	</delete>
	
<<<<<<< HEAD
=======
	<!-- 9. 학생 상세보기 -->
	<select id="selectStudentsByNO" parameterType="int" resultType="Student">
	SELECT STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
	FROM STUDENT
	WHERE STU_NO = #{stuNo}
	</select>
	<!-- 10. 학생수정 -->
	<update id="updateStudent" parameterType="Student">
		UPDATE STUDENT
		   SET NAME = #{name}, KOR = #{kor}, ENG = #{eng}, MATH = #{math}, AVE = #{ave}, GRADE = #{grade}
		 WHERE STU_NO = #{stuNo}
	</update>
	
	<!-- 11. 평균기준 상위 3명 -->
	<select id="selectStudentsTop3" resultType="Student">
		SELECT A.RANK, A.STU_NO, A.NAME, A.KOR, A.ENG, A.MATH, A.AVE, A.GRADE
		FROM (SELECT RANK() OVER(ORDER BY AVE DESC) AS RANK, STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
		FROM STUDENT) A
		 WHERE A.RANK <![CDATA[<=]]> 3
		<!--SELECT RANK() OVER(ORDER bY AVE DESC) AS RANK, STU, NAME, KOR, ENG, MATH, AVE, GRADE
		FROM STUDENT
		 WHERE RANK BETWEEN 1 AND 3 -->
		
	</select>
	
	
>>>>>>> c75a8e6c98cc08ab96481493b891ba67c8be16f5

</mapper>